---
# nav:
#   title: 性能优化
#   order: 1
---

## Model

```typescript | pure
import { Model } from '@clean-js/presenter';

interface IViewState {
  loading: boolean;
  name: string
}

export class NameModel extends Model<IViewState> {
  constructor() {
    super();
    this.state = {
      loading: false,
      name: 'lujs'
    }
}

```

## Presenter

```typescript | pure
import { Presenter, injectable } from '@clean-js/presenter';
@injectable()
export class NamePresenter extends Presenter<NameModel> {
  constructor(protected readonly model: OrderModel) {
    super();
  }

  changeName() {
    this.model.setState((s) => {
      s.name = 'aha';
    });
    this.updateView();
  }

  changeLoading() {
    this.model.setState((s) => {
      s.loading = !s.loading;
    });
    this.updateView();
  }
}
```

## View

```typescript | pure
const Loading = ({ loading, changeLoading }) => {
  console.log('render Loading');
  return (
    <div>
      loading: {loading}
      <button
        onClick={() => {
          changeLoading();
        }}
      >
        change loading
      </button>
    </div>
  );
};

export default Name;
```

```typescript | pure
const Name = ({ name, changeName }) => {
  console.log('render name');
  return (
    <div>
      name: {name}
      <button
        onClick={() => {
          changeName();
        }}
      >
        change name
      </button>
    </div>
  );
};

export default Name;
```

```typescript | pure
const Page = () => {
  const { presenter, state } = usePresenter<NamePresenter>(NamePresenter);
  return (
    <div>
      <Name name={state.name} changeName={presenter.changeName}></Name>
    </div>
  );
};

export default Page;
```
